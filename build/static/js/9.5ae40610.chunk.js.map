{"version":3,"sources":["components/Dashboard/Media/Media.tsx","components/Dashboard/MediaBlockRenderer/MediaBlockRenderer.tsx","components/Dashboard/RichEditor/RichEditor.tsx"],"names":["Image","props","src","alt","Media","entity","contentState","getEntity","block","getEntityAt","getData","type","getType","media","mediaBlockRenderer","component","editable","RichEditor","useContext","DataContext","data","dataDispatch","dataService","DataServices","blogPost","blogId","blogs","filter","b","id","blogState","EditorState","createWithContent","convertFromRaw","JSON","parse","content","createEmpty","useState","editorState","setEditorState","getCurrentContent","stringify","convertToRaw","editorContent","setEditorContent","history","useHistory","editor","createRef","focusEditor","current","focus","handleChange","className","hasText","getBlockMap","first","variant","onAddImage","publicId","urlValue","process","contentStateWithEntitiy","createEntity","entityKey","getLastCreatedEntityKey","newEditorState","set","currentContent","AtomicBlockUtils","insertAtomicBlock","setTimeout","handleSave","createNewPost","userId","users","_id","push","updatePost","onClick","ref","blockStyleFn","getBlockStyle","blockRendererFn","handleKeyCommand","command","newState","RichUtils","keyBindingFn","e","keyCode","onTab","getDefaultKeyBinding","onChange","placeholder"],"mappings":"6GAAA,iEAUA,SAASA,EAAMC,GACb,OAAMA,EAAMC,IACH,yBAAKA,IAAKD,EAAMC,IAAKC,IAAI,oBAE3B,KAEF,SAASC,EAAMH,GACpB,IAAMI,EAAyBJ,EAAMK,aAAaC,UAAUN,EAAMO,MAAMC,YAAY,IAC5EP,EAAQG,EAAOK,UAAfR,IACFS,EAAON,EAAOO,UAEhBC,EAAqB,qCAKzB,MAHa,UAATF,IACFE,EAAQ,kBAACb,EAAD,CAAOE,IAAKA,KAEfW,I,gCCzBT,sEAOO,SAASC,EAAmBN,GACjC,MAAwB,WAApBA,EAAMI,UACD,CACLG,UAAWX,QACXY,UAAU,GAGP,O,oKCUF,SAASC,EAAWhB,GAA4B,IAAD,EACrBiB,qBAAWC,KAAlCC,EAD4C,EAC5CA,KAAMC,EADsC,EACtCA,aACRC,EAAc,IAAIC,IAAaF,GAC/BG,EAAWvB,EAAMwB,OAASL,EAAKM,MAAMC,QAAO,SAACC,GAAD,OAAiBA,EAAEC,KAAO5B,EAAMwB,OAAOI,MAAI,GAAK,KAC5FC,EAAyBN,EAC3BO,cAAYC,kBAAkBC,yBAAeC,KAAKC,MAAMX,EAASY,WACjEL,cAAYM,cANoC,EAQdC,mBAAsBR,GARR,mBAQ7CS,EAR6C,KAQhCC,EARgC,KAS9CJ,EAAUG,EAAYE,oBATwB,EAWVH,mBAAiBJ,KAAKQ,UAAUC,uBAAaP,KAXnC,mBAW7CQ,EAX6C,KAW9BC,EAX8B,KAa9CC,EAAUC,cAEVC,EAASC,sBACTC,EAAc,WACdF,EAAOG,SACTH,EAAOG,QAAQC,SAGbC,EAAe,SAACd,GACpBC,EAAeD,GACfM,EAAiBX,KAAKQ,UAAUC,uBAAaP,MAgDzC9B,EAAeiC,EAAYE,oBAC7Ba,EAAY,oBAYhB,OAXKhD,EAAaiD,WAKG,aAHjBjD,EACGkD,cACAC,QACA7C,YAEH0C,GAAa,+BAKf,yBAAKA,UAAU,UACb,yBAAKA,UAAU,cACb,kBAAC,UAAD,CACEI,QAASzD,EAAMwB,OAAS,OAAS,UACjCkC,WA9BW,SAACC,GAClB,IAAMC,EAAQ,qCAAiCC,cAAjC,yBAAiFF,EAAjF,QAERG,EADexB,EAAYE,oBACYuB,aAAa,QAAS,YAAa,CAAE9D,IAAK2D,IACjFI,EAAYF,EAAwBG,0BACpCC,EAAiBpC,cAAYqC,IAAI7B,EAAa,CAClD8B,eAAgBN,IAElBvB,EAAe8B,mBAAiBC,kBAAkBJ,EAAgBF,EAAW,MAC7EO,YAAW,kBAAMtB,MAAe,IAsB1BX,YAAaA,EACbc,aAAcA,EACdoB,WAlEW,SAAC9D,GAAD,OAAkB,WACtB,YAATA,GACFW,EAAYoD,cAAc,CACxBtC,QAASQ,EACT+B,OAAQvD,EAAKwD,MAAM,GAAGC,MAExB/B,EAAQgC,KAAK,sBAEbxD,EAAYyD,WAAW9E,EAAMwB,OAAOI,GAAIe,GACxCE,EAAQgC,KAAK,yBA2DX,yBAAKxB,UAAWA,EAAW0B,QAAS9B,GAClC,kBAAC,SAAD,CACE+B,IAAKjC,EACLkC,aAAcC,IACdC,gBAAiBtE,qBACjByB,YAAaA,EACb8C,iBA7De,SAACC,EAA6B/C,GACrD,IAAMgD,EAAWC,YAAUH,iBAAiB9C,EAAa+C,GACzD,OAAIC,GACFlC,EAAakC,GACN,WAEA,eAwDDE,aArDoB,SAACC,GAC7B,GAAkB,IAAdA,EAAEC,QAAe,CACnB,IAAMxB,EAAiBqB,YAAUI,MAAMF,EAAGnD,EAAa,GAIvD,OAHI4B,IAAmB5B,GACrBc,EAAac,GAER,KAET,OAAO0B,+BAAqBH,IA8CpBI,SAAUzC,EACV0C,YAAY","file":"static/js/9.5ae40610.chunk.js","sourcesContent":["import React from 'react'\nimport { EntityInstance, ContentBlock, ContentState } from 'draft-js'\n\ntype ImageProps = {\n  src: string\n}\ntype MediaProps = {\n  block: ContentBlock\n  contentState: ContentState\n}\nfunction Image(props: ImageProps): JSX.Element | null {\n  if (!!props.src) {\n    return <img src={props.src} alt=\"upload to cloud\" />\n  }\n  return null\n}\nexport function Media(props: MediaProps): JSX.Element {\n  const entity: EntityInstance = props.contentState.getEntity(props.block.getEntityAt(0))\n  const { src } = entity.getData()\n  const type = entity.getType()\n\n  let media: JSX.Element = <></>\n\n  if (type === 'image') {\n    media = <Image src={src} />\n  }\n  return media\n}\n","import { ContentBlock } from 'draft-js'\nimport { Media } from '../Media/Media'\nimport { ReactNode } from 'react'\n\ntype MediaBlock = {\n  component: ReactNode\n  editable: boolean\n}\nexport function mediaBlockRenderer(block: ContentBlock): MediaBlock | null {\n  if (block.getType() === 'atomic') {\n    return {\n      component: Media,\n      editable: false,\n    }\n  }\n  return null\n}\n","import React, { useState, KeyboardEvent, createRef, useContext } from 'react'\nimport {\n  Editor,\n  EditorState,\n  RichUtils,\n  getDefaultKeyBinding,\n  DraftEditorCommand,\n  convertToRaw,\n  AtomicBlockUtils,\n  convertFromRaw,\n} from 'draft-js'\nimport { Toolbar } from '../Toolbar/Toolbar'\nimport { DataContext } from '../../../contexts/dataContext'\nimport { mediaBlockRenderer } from '../MediaBlockRenderer/MediaBlockRenderer'\nimport { useHistory } from 'react-router-dom'\nimport { getBlockStyle } from 'Helper'\nimport { BlogType } from 'pages/Blog/Blog'\nimport { DataServices } from 'services/dataService'\n\ntype HandleKeyCommand = 'handled' | 'not-handled'\ntype Props = {\n  blogId: {\n    id?: string\n  }\n}\nexport function RichEditor(props: Props): JSX.Element {\n  const { data, dataDispatch } = useContext(DataContext)\n  const dataService = new DataServices(dataDispatch)\n  const blogPost = props.blogId ? data.blogs.filter((b: BlogType) => b.id === props.blogId.id)[0] : null\n  const blogState: EditorState = blogPost\n    ? EditorState.createWithContent(convertFromRaw(JSON.parse(blogPost.content)))\n    : EditorState.createEmpty()\n\n  const [editorState, setEditorState] = useState<EditorState>(blogState)\n  const content = editorState.getCurrentContent()\n\n  const [editorContent, setEditorContent] = useState<string>(JSON.stringify(convertToRaw(content)))\n\n  const history = useHistory()\n\n  const editor = createRef<Editor>()\n  const focusEditor = (): void => {\n    if (editor.current) {\n      editor.current.focus()\n    }\n  }\n  const handleChange = (editorState: EditorState): void => {\n    setEditorState(editorState)\n    setEditorContent(JSON.stringify(convertToRaw(content)))\n  }\n\n  const handleSave = (type: string) => (): void => {\n    if (type === 'Publish') {\n      dataService.createNewPost({\n        content: editorContent,\n        userId: data.users[0]._id,\n      })\n      history.push('/dashboard/posts')\n    } else {\n      dataService.updatePost(props.blogId.id, editorContent)\n      history.push('/dashboard/posts')\n    }\n  }\n\n  const handleKeyCommand = (command: DraftEditorCommand, editorState: EditorState): HandleKeyCommand => {\n    const newState = RichUtils.handleKeyCommand(editorState, command)\n    if (newState) {\n      handleChange(newState)\n      return 'handled'\n    } else {\n      return 'not-handled'\n    }\n  }\n  const mapKeyToEditorCommand = (e: KeyboardEvent): any => {\n    if (e.keyCode === 9) {\n      const newEditorState = RichUtils.onTab(e, editorState, 4)\n      if (newEditorState !== editorState) {\n        handleChange(newEditorState)\n      }\n      return null\n    }\n    return getDefaultKeyBinding(e)\n  }\n\n  const onAddImage = (publicId: string): void => {\n    const urlValue = `https://res.cloudinary.com/${process.env.REACT_APP_CLOUDNAME}/image/upload/${publicId}.jpg`\n    const contentState = editorState.getCurrentContent()\n    const contentStateWithEntitiy = contentState.createEntity('image', 'IMMUTABLE', { src: urlValue })\n    const entityKey = contentStateWithEntitiy.getLastCreatedEntityKey()\n    const newEditorState = EditorState.set(editorState, {\n      currentContent: contentStateWithEntitiy,\n    })\n    setEditorState(AtomicBlockUtils.insertAtomicBlock(newEditorState, entityKey, ' '))\n    setTimeout(() => focusEditor(), 0)\n  }\n\n  const contentState = editorState.getCurrentContent()\n  let className = 'RichEditor-editor'\n  if (!contentState.hasText()) {\n    if (\n      contentState\n        .getBlockMap()\n        .first()\n        .getType() !== 'unstyled'\n    ) {\n      className += ' RichEditor-hidePlaceholder'\n    }\n  }\n\n  return (\n    <div className=\"editor\">\n      <div className=\"RichEditor\">\n        <Toolbar\n          variant={props.blogId ? 'Save' : 'Publish'}\n          onAddImage={onAddImage}\n          editorState={editorState}\n          handleChange={handleChange}\n          handleSave={handleSave}\n        />\n        <div className={className} onClick={focusEditor}>\n          <Editor\n            ref={editor}\n            blockStyleFn={getBlockStyle}\n            blockRendererFn={mediaBlockRenderer}\n            editorState={editorState}\n            handleKeyCommand={handleKeyCommand}\n            keyBindingFn={mapKeyToEditorCommand}\n            onChange={handleChange}\n            placeholder=\"Tell a story...\"\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"sourceRoot":""}