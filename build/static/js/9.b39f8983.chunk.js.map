{"version":3,"sources":["components/Dashboard/PctureChoice/PctureChoice.tsx","components/Dashboard/Gallery/Gallery.tsx"],"names":["Picture","props","imgUrl","publicId","handleClick","checked","className","key","onClick","src","alt","type","readOnly","Gallery","useContext","DataContext","gallery","data","dataDispatch","dataService","DataServices","images","reduce","acc","curr","public_id","useState","checkState","setCheckState","openWidget","window","cloudinary","openUploadWidget","cloudName","process","uploadPreset","tags","error","result","event","payload","info","withCb","cb","checkList","push","length","text","removeImage","map"],"mappings":"0GAAA,mEASO,SAASA,EAAQC,GAA4B,IAC1CC,EAA2CD,EAA3CC,OAAQC,EAAmCF,EAAnCE,SAAUC,EAAyBH,EAAzBG,YAAaC,EAAYJ,EAAZI,QACvC,OACE,yBAAKC,UAAU,UAAUC,IAAKJ,EAAUK,QAASJ,EAAYD,IAC3D,yBAAKG,UAAU,iBAAiBG,IAAKP,EAAQQ,IAAI,QACjD,2BAAOC,KAAK,WAAWC,UAAQ,EAACP,QAASA,EAASC,UAAU,wB,wJCF3D,SAASO,EAAQZ,GAA4B,IAAD,EAI7Ca,qBAAWC,KAFLC,EAFuC,EAE/CC,KAAQD,QACRE,EAH+C,EAG/CA,aAEIC,EAAc,IAAIC,IAAaF,GAC/BG,EAASL,EAAQM,QAAO,SAACC,EAAUC,GAEvC,OADAD,EAAIC,EAAKC,YAAa,EACfF,IACN,IAT8C,EAWbG,mBAASL,GAXI,mBAW1CM,EAX0C,KAW9BC,EAX8B,KAa3CC,EAAa,WACfC,OAAeC,WAAWC,iBAC1B,CACEC,UAAWC,cACXC,aAAcD,WACdE,KAAM,CAAC,UAET,SAACC,EAAcC,GACQ,YAAjBA,EAAOC,OACTrB,EAAa,CACXP,KAAM,cACN6B,QAASF,EAAOG,WAOpBrC,EAAc,SAACD,GAAD,OAAsB,WACpCF,EAAMyC,QACRzC,EAAM0C,GAAGxC,GAEXyB,EAAc,eACTD,EADQ,eAEVxB,GAAYwB,EAAWxB,QAItByC,EAAY5B,EAAQM,QAAO,SAACC,EAAeC,GAI/C,OAHIG,EAAWH,EAAKC,YAClBF,EAAIsB,KAAKrB,EAAKC,WAETF,IACN,IAKH,OACE,yBAAKjB,UAAU,WACXU,EAAQ8B,OAKR,oCACE,6BACE,kBAAC,SAAD,CAAQC,KAAK,MAAM3C,YAAayB,IAC/Be,EAAU,IACT,kBAAC,SAAD,CAAQG,KAAMH,EAAUE,OAAS,EAAI,aAAe,SAAU1C,YAfrD,WACnBe,EAAY6B,YAAYJ,EAAU,QAiB5B,yBAAKtC,UAAU,qBACZU,EAAQiC,KAAI,SAAChC,GAAD,OACX,kBAAC,UAAD,CACEZ,QAASsB,EAAWV,EAAKQ,WACzBrB,YAAaA,EACbG,IAAKU,EAAKQ,UACVtB,SAAUc,EAAKQ,UACfvB,OAAM,qCAAgCgC,cAAhC,yBAAgFjB,EAAKQ,UAArF,eAlBd,yBAAKnB,UAAU,kBAAf,yBACwB,kBAAC,SAAD,CAAQyC,KAAK,cAAc3C,YAAayB,IAAe","file":"static/js/9.b39f8983.chunk.js","sourcesContent":["import React from 'react'\n\ntype Props = {\n  checked: boolean\n  imgUrl: string\n  publicId: string\n  handleClick: (publicId: string) => () => void\n}\n\nexport function Picture(props: Props): JSX.Element {\n  const { imgUrl, publicId, handleClick, checked } = props\n  return (\n    <div className=\"picture\" key={publicId} onClick={handleClick(publicId)}>\n      <img className=\"picture__image\" src={imgUrl} alt=\"pic\" />\n      <input type=\"checkbox\" readOnly checked={checked} className=\"picture__checked\" />\n    </div>\n  )\n}\n","import React, { useContext, useState } from 'react'\nimport { Button } from '../../Button/Button'\nimport { Picture } from '../PctureChoice/PctureChoice'\nimport { DataContext } from '../../../contexts/dataContext'\nimport { GalleryInterface } from '../../../reducers/dataReducer'\nimport { DataServices } from 'services/dataService'\n\ninterface Props {\n  withCb: boolean\n  cb: (publicId: string) => void\n}\n\nexport function Gallery(props: Props): JSX.Element {\n  const {\n    data: { gallery },\n    dataDispatch,\n  } = useContext(DataContext)\n  const dataService = new DataServices(dataDispatch)\n  const images = gallery.reduce((acc: any, curr: GalleryInterface) => {\n    acc[curr.public_id] = false\n    return acc\n  }, [])\n\n  const [checkState, setCheckState] = useState(images)\n\n  const openWidget = (): void => {\n    ;(window as any).cloudinary.openUploadWidget(\n      {\n        cloudName: process.env.REACT_APP_CLOUDNAME,\n        uploadPreset: process.env.REACT_APP_PRESET,\n        tags: ['xmas'],\n      },\n      (error: Error, result: any) => {\n        if (result.event === 'success') {\n          dataDispatch({\n            type: 'ADD_GALLERY',\n            payload: result.info,\n          })\n        }\n      },\n    )\n  }\n\n  const handleClick = (publicId: string) => (): void => {\n    if (props.withCb) {\n      props.cb(publicId)\n    }\n    setCheckState({\n      ...checkState,\n      [publicId]: !checkState[publicId],\n    })\n  }\n\n  const checkList = gallery.reduce((acc: string[], curr: GalleryInterface) => {\n    if (checkState[curr.public_id]) {\n      acc.push(curr.public_id)\n    }\n    return acc\n  }, [])\n  const handleDelete = (): void => {\n    dataService.removeImage(checkList[0])\n  }\n\n  return (\n    <div className=\"gallery\">\n      {!gallery.length ? (\n        <div className=\"gallery__empty\">\n          The gallery is empty! <Button text=\"Add picture\" handleClick={openWidget} />{' '}\n        </div>\n      ) : (\n        <>\n          <div>\n            <Button text=\"Add\" handleClick={openWidget} />\n            {checkList[0] && (\n              <Button text={checkList.length > 1 ? 'Delete all' : 'Delete'} handleClick={handleDelete} />\n            )}\n          </div>\n          <div className=\"gallery__contents\">\n            {gallery.map((data: GalleryInterface) => (\n              <Picture\n                checked={checkState[data.public_id]}\n                handleClick={handleClick}\n                key={data.public_id}\n                publicId={data.public_id}\n                imgUrl={`https://res.cloudinary.com/${process.env.REACT_APP_CLOUDNAME}/image/upload/${data.public_id}.jpg`}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  )\n}\n"],"sourceRoot":""}