{"version":3,"sources":["components/Button/index.tsx","components/Dashboard/PctureChoice/index.tsx","components/Dashboard/Gallery/index.tsx"],"names":["Button","text","handleClick","type","className","onClick","Picture","props","imgUrl","publicId","checked","key","src","alt","readOnly","Gallery","useContext","DataContext","gallery","data","dataDispatch","dataService","images","reduce","acc","curr","public_id","useState","checkState","setCheckState","openWidget","window","cloudinary","openUploadWidget","cloudName","process","uploadPreset","tags","error","result","event","payload","info","withCb","cb","checkList","push","length","removeImage","map"],"mappings":"8GAAA,2BAYeA,UANuB,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAC3C,OACI,4BAAQC,KAAK,SAASC,UAAU,SAASC,QAASH,GAAeD,K,gCCRzE,mEASO,SAASK,EAAQC,GAA4B,IAC1CC,EAA2CD,EAA3CC,OAAQC,EAAmCF,EAAnCE,SAAUP,EAAyBK,EAAzBL,YAAaQ,EAAYH,EAAZG,QACvC,OACE,yBAAKN,UAAU,UAAUO,IAAKF,EAAUJ,QAASH,EAAYO,IAC3D,yBAAKL,UAAU,iBAAiBQ,IAAKJ,EAAQK,IAAI,QACjD,2BAAOV,KAAK,WAAWW,UAAQ,EAACJ,QAASA,EAASN,UAAU,sBAKnDE,a,0GC2EAS,UAnFf,SAAiBR,GAA4B,IAAD,EAKtCS,qBAAWC,KAHLC,EAFgC,EAExCC,KAAQD,QACRE,EAHwC,EAGxCA,aACAC,EAJwC,EAIxCA,YAGIC,EAASJ,EAAQK,QAAO,SAACC,EAAUC,GAEvC,OADAD,EAAIC,EAAKC,YAAa,EACfF,IACN,IAVuC,EAYNG,mBAASL,GAZH,mBAYnCM,EAZmC,KAYvBC,EAZuB,KAcpCC,EAAa,WACfC,OAAeC,WAAWC,iBAC1B,CACEC,UAAWC,cACXC,aAAcD,WACdE,KAAM,CAAC,UAET,SAACC,EAAcC,GACQ,YAAjBA,EAAOC,OACTpB,EAAa,CACXjB,KAAM,cACNsC,QAASF,EAAOG,WAOpBxC,EAAc,SAACO,GAAD,OAAsB,WACpCF,EAAMoC,QACRpC,EAAMqC,GAAGnC,GAEXoB,EAAc,eACTD,EADQ,eAEVnB,GAAYmB,EAAWnB,QAItBoC,EAAY3B,EAAQK,QAAO,SAACC,EAAeC,GAI/C,OAHIG,EAAWH,EAAKC,YAClBF,EAAIsB,KAAKrB,EAAKC,WAETF,IACN,IAKH,OACE,yBAAKpB,UAAU,WACXc,EAAQ6B,OAKR,oCACE,6BACE,kBAAC,UAAD,CAAQ9C,KAAK,MAAMC,YAAa4B,IAC/Be,EAAU,IACT,kBAAC,UAAD,CAAQ5C,KAAM4C,EAAUE,OAAS,EAAI,aAAe,SAAU7C,YAfrD,WACnBmB,EAAY2B,YAAYH,EAAU,QAiB5B,yBAAKzC,UAAU,qBACZc,EAAQ+B,KAAI,SAAC9B,GAAD,OACX,kBAAC,UAAD,CACET,QAASkB,EAAWT,EAAKO,WACzBxB,YAAaA,EACbS,IAAKQ,EAAKO,UACVjB,SAAUU,EAAKO,UACflB,OAAM,qCAAgC2B,cAAhC,yBAAgFhB,EAAKO,UAArF,eAlBd,yBAAKtB,UAAU,kBAAf,yBACwB,kBAAC,UAAD,CAAQH,KAAK,cAAcC,YAAa4B,IAAe","file":"static/js/25.c47f4abc.chunk.js","sourcesContent":["import React from 'react';\n\ninterface ButtonProps {\n    text: string;\n    handleClick?: () => void;\n}\nconst Button: React.FC<ButtonProps> = ({ text, handleClick }) => {    \n    return(\n        <button type=\"submit\" className=\"button\" onClick={handleClick} >{text}</button>\n    );\n};\n\nexport default Button;","import React from 'react'\n\ntype Props = {\n  checked: boolean\n  imgUrl: string\n  publicId: string\n  handleClick: (publicId: string) => () => void\n}\n\nexport function Picture(props: Props): JSX.Element {\n  const { imgUrl, publicId, handleClick, checked } = props\n  return (\n    <div className=\"picture\" key={publicId} onClick={handleClick(publicId)}>\n      <img className=\"picture__image\" src={imgUrl} alt=\"pic\" />\n      <input type=\"checkbox\" readOnly checked={checked} className=\"picture__checked\" />\n    </div>\n  )\n}\n\nexport default Picture\n","import React, { useContext, useState } from 'react'\nimport Button from '../../Button'\nimport Picture from '../PctureChoice'\nimport { DataContext } from '../../../contexts/dataContext'\nimport { GalleryInterface } from '../../../reducers/dataReducer'\n\ninterface Props {\n  withCb: boolean\n  cb: (publicId: string) => void\n}\n\nfunction Gallery(props: Props): JSX.Element {\n  const {\n    data: { gallery },\n    dataDispatch,\n    dataService,\n  } = useContext(DataContext)\n\n  const images = gallery.reduce((acc: any, curr: GalleryInterface) => {\n    acc[curr.public_id] = false\n    return acc\n  }, [])\n\n  const [checkState, setCheckState] = useState(images)\n\n  const openWidget = (): void => {\n    ;(window as any).cloudinary.openUploadWidget(\n      {\n        cloudName: process.env.REACT_APP_CLOUDNAME,\n        uploadPreset: process.env.REACT_APP_PRESET,\n        tags: ['xmas'],\n      },\n      (error: Error, result: any) => {\n        if (result.event === 'success') {\n          dataDispatch({\n            type: 'ADD_GALLERY',\n            payload: result.info,\n          })\n        }\n      },\n    )\n  }\n\n  const handleClick = (publicId: string) => (): void => {\n    if (props.withCb) {\n      props.cb(publicId)\n    }\n    setCheckState({\n      ...checkState,\n      [publicId]: !checkState[publicId],\n    })\n  }\n\n  const checkList = gallery.reduce((acc: string[], curr: GalleryInterface) => {\n    if (checkState[curr.public_id]) {\n      acc.push(curr.public_id)\n    }\n    return acc\n  }, [])\n  const handleDelete = (): void => {\n    dataService.removeImage(checkList[0])\n  }\n\n  return (\n    <div className=\"gallery\">\n      {!gallery.length ? (\n        <div className=\"gallery__empty\">\n          The gallery is empty! <Button text=\"Add picture\" handleClick={openWidget} />{' '}\n        </div>\n      ) : (\n        <>\n          <div>\n            <Button text=\"Add\" handleClick={openWidget} />\n            {checkList[0] && (\n              <Button text={checkList.length > 1 ? 'Delete all' : 'Delete'} handleClick={handleDelete} />\n            )}\n          </div>\n          <div className=\"gallery__contents\">\n            {gallery.map((data: GalleryInterface) => (\n              <Picture\n                checked={checkState[data.public_id]}\n                handleClick={handleClick}\n                key={data.public_id}\n                publicId={data.public_id}\n                imgUrl={`https://res.cloudinary.com/${process.env.REACT_APP_CLOUDNAME}/image/upload/${data.public_id}.jpg`}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default Gallery\n"],"sourceRoot":""}