{"version":3,"sources":["Helper/index.ts","components/Table/Table.tsx","components/Modal/Modal.tsx","components/Dashboard/CommentList/CommentList.tsx","components/Dashboard/PostTable/PostTable.tsx"],"names":["formatDate","date","Intl","DateTimeFormat","year","month","day","format","Date","formatTime","hour","minute","emailValidation","email","match","getBlockStyle","block","getType","extractFromDraft","content","draft","JSON","parse","blocksWithText","blocks","filter","b","text","length","title","type","p","imgUrl","entityMap","data","url","validateDraft","blockHaveHeader1","blockHaveText","undefined","Table","props","heads","map","head","key","children","modalRoot","document","createElement","Modal","toggleModal","useEffect","body","appendChild","removeChild","createPortal","className","onClick","CommentRow","item","comment","commenter","_id","index","handleDelete","handleClick","CommentList","dataDispatch","useContext","DataContext","dataService","DataServices","commentId","a","removeComment","console","log","comments","BlogRow","createdAt","updatedAt","id","toISOString","slice","href","split","join","e","to","PostTable","drafts","useState","isOpen","setIsOpen","post","setComments","blogs","blog","blogId","window","confirm","removePost","toggle","commentList","preventDefault"],"mappings":"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","file":"static/js/11.25cef187.chunk.js","sourcesContent":["import { RawDraftContentState, RawDraftContentBlock } from 'draft-js'\nimport { ContentBlock } from 'draft-js'\n\ntype DraftType = {\n  title: string\n  p: string\n  url: string\n}\n\nexport const formatDate = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    year: 'numeric',\n    month: 'short',\n    day: '2-digit',\n  }).format(new Date(date))\n\nexport const formatTime = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    hour: 'numeric',\n    minute: 'numeric',\n  }).format(new Date(date))\nexport const emailValidation = (email: string): RegExpMatchArray | null =>\n  email.match(/^([a-zA-Z0-9_\\-.]+)@([a-zA-Z0-9_\\-\\\\.]+)\\.([a-zA-Z]{2,5})$/)\n\nexport const getBlockStyle = (block: ContentBlock): string => {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote'\n    case 'unstyled':\n      return 'RichEditor-paragraph'\n    case 'CODE':\n      return 'RichEditor-blockcode'\n    case 'STRIKETHROUGH':\n      return 'RichEditor-strikethrough'\n    default:\n      return ''\n  }\n}\nexport const extractFromDraft = (content: string): DraftType => {\n  const draft: RawDraftContentState = JSON.parse(content)\n  const { blocks } = draft\n  const blocksWithText = blocks.filter((b: RawDraftContentBlock) => b.text.length)\n  const title = blocksWithText.filter((b: RawDraftContentBlock) => b.type === 'header-one')[0]\n  const p = blocksWithText.filter((b: RawDraftContentBlock) => b.type === 'unstyled')[0]\n  const imgUrl = draft.entityMap[0] ? draft.entityMap[0].data['src'] : null\n  return {\n    title: title.text,\n    p: p.text,\n    url: imgUrl,\n  }\n}\n\nexport const validateDraft = (content: string): boolean => {\n  const draft: RawDraftContentState = JSON.parse(content)\n  const { blocks } = draft\n  const blockHaveHeader1 = blocks.filter((block: RawDraftContentBlock) => block.type === 'header-one')[0]\n  const blockHaveText = blocks\n    .filter((block: RawDraftContentBlock) => block.type === 'unstyled')\n    .filter((b: RawDraftContentBlock) => b.text.length > 1)\n  return blockHaveHeader1 !== undefined && blockHaveText.length > 0\n}\nexport const formatDateAndTime = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    day: 'numeric',\n    month: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n  }).format(new Date(date))\n","import React, { ReactNode } from 'react'\n\ninterface TableProps {\n  children: ReactNode\n  heads: string[]\n}\nexport function Table(props: TableProps): JSX.Element {\n  return (\n    <table>\n      <thead>\n        <tr>\n          {props.heads.map(head => (\n            <th key={head}>{head}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>{props.children}</tbody>\n    </table>\n  )\n}\n","import React, { useEffect, ReactNode } from 'react'\nimport { createPortal } from 'react-dom'\n\ntype Props = {\n  children: ReactNode\n  toggleModal: () => void\n}\n\nconst modalRoot: HTMLElement = document.createElement('portal')\n\nexport function Modal(props: Props): React.ReactElement | null {\n  const { toggleModal, children } = props\n  useEffect(() => {\n    document.body.appendChild(modalRoot)\n\n    return (): void => {\n      document.body.removeChild(modalRoot)\n    }\n  }, [])\n\n  return createPortal(\n    <div className=\"modal\">\n      <div className=\"modal__overlay\" onClick={toggleModal} />\n      <div className=\"modal__body\">{children}</div>\n    </div>,\n    modalRoot as HTMLElement,\n  )\n}\n","import React, { useContext } from 'react'\nimport { Button } from '../../Button/Button'\nimport { DataContext } from '../../../contexts/dataContext'\nimport { Table } from '../../Table/Table'\nimport { DataServices } from '../../../services/dataService'\nimport { CommentInterface } from '../../../reducers/dataReducer'\n\ntype Props = {\n  comments: CommentInterface[]\n}\n\ntype TableRow = {\n  item: CommentInterface\n  index: number\n  handleDelete: (args: string) => () => void\n}\nexport function CommentRow(props: TableRow): JSX.Element {\n  const {\n    item: { comment, commenter, email, _id },\n    index,\n    handleDelete,\n  } = props\n\n  return (\n    <tr>\n      <td>{index + 1}</td>\n      <td>{comment}</td>\n      <td>{commenter}</td>\n      <td>{email}</td>\n      <td>\n        <Button text=\"Delete\" handleClick={handleDelete(_id)} />\n      </td>\n    </tr>\n  )\n}\n\nexport function CommentList(props: Props): JSX.Element {\n  const { dataDispatch } = useContext(DataContext)\n  const dataService = new DataServices(dataDispatch)\n  const handleDelete = (commentId: string) => async (): Promise<void> => {\n    try {\n      await dataService.removeComment(commentId)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const heads = ['number', 'comment', 'commenter', 'email', 'action']\n\n  return (\n    <div className=\"comments\">\n      <Table heads={heads}>\n        {props.comments.map((comment: CommentInterface, index: number) => (\n          <CommentRow item={comment} key={comment._id} index={index} handleDelete={handleDelete} />\n        ))}\n      </Table>\n    </div>\n  )\n}\n","import React, { useContext, useState, MouseEvent } from 'react'\nimport { Link } from 'react-router-dom'\nimport { DataContext } from '../../../contexts/dataContext'\nimport { Button } from '../../Button/Button'\nimport { extractFromDraft } from '../../../Helper'\nimport { Modal } from '../../Modal/Modal'\nimport { CommentList } from '../CommentList/CommentList'\nimport { Table } from '../../Table/Table'\nimport { DataServices } from '../../../services/dataService'\nimport { BlogInterface, CommentInterface } from '../../../reducers/dataReducer'\n\ntype TableRow = {\n  item: BlogInterface\n  index: number\n  handleClick: (id: string) => () => void\n  toggleModal: (e: MouseEvent<HTMLAnchorElement>, comments: CommentInterface[]) => void\n}\n\nfunction BlogRow(props: TableRow): JSX.Element {\n  const {\n    item: { comments, content, createdAt, updatedAt, id },\n    index,\n    toggleModal,\n    handleClick,\n  } = props\n  const date = (date: string): JSX.Element => <td>{new Date(date).toISOString().slice(0, 10)}</td>\n  return (\n    <tr>\n      <td>{index + 1}</td>\n      <td>\n        <a\n          href={`/blog/${extractFromDraft(content)\n            .title.split(' ')\n            .join('-')}`}\n        >\n          {extractFromDraft(content).title}\n        </a>\n      </td>\n      {date(createdAt)}\n      {date(updatedAt)}\n      <td>\n        <a href=\"/#\" onClick={(e: MouseEvent<HTMLAnchorElement>): void => toggleModal(e, comments)}>\n          {comments.length}\n        </a>\n      </td>\n      <td>\n        <Link to={`/dashboard/edit/${id}`}>\n          <Button text=\"Edit\" />\n        </Link>\n      </td>\n      <td>\n        <Button text=\"Delete\" handleClick={handleClick(id)} />\n      </td>\n    </tr>\n  )\n}\n\ntype PostTableProps = {\n  heads: string[]\n  drafts: boolean\n}\nexport function PostTable({ heads, drafts }: PostTableProps): JSX.Element {\n  const [isOpen, setIsOpen] = useState(false)\n  const [comments, setComments] = useState<CommentInterface[]>([\n    {\n      commenter: '',\n      email: '',\n      comment: '',\n      createdAt: '',\n      _id: '',\n      post: '',\n    },\n  ])\n  const { data, dataDispatch } = useContext(DataContext)\n  const dataService = new DataServices(dataDispatch)\n\n  const blogs = data.blogs.filter((blog: BlogInterface) => blog.draft === drafts)\n\n  if (!blogs.length) {\n    return (\n      <div className=\"posts\">\n        <h1>There is nothing here!</h1>\n      </div>\n    )\n  }\n\n  const toggleModal = (): void => setIsOpen(!isOpen)\n  const handleClick = (blogId: string) => (): void | null => {\n    const alert = 'Are you sure you want to delete this post?'\n    if (window.confirm(alert)) {\n      dataService.removePost(blogId)\n    } else {\n      return null\n    }\n  }\n\n  const toggle = (e: MouseEvent<HTMLAnchorElement>, commentList: CommentInterface[]): void => {\n    e.preventDefault()\n    setComments(commentList)\n    setIsOpen(!isOpen)\n  }\n\n  return (\n    <div className=\"posts\">\n      {isOpen && (\n        <Modal toggleModal={toggleModal}>\n          <CommentList comments={comments} />\n        </Modal>\n      )}\n      <div className=\"posts-table\">\n        <Table heads={heads}>\n          {blogs.map((blog: BlogInterface, index: number) => (\n            <BlogRow key={blog.id} item={blog} index={index} toggleModal={toggle} handleClick={handleClick} />\n          ))}\n        </Table>\n      </div>\n    </div>\n  )\n}\n"],"sourceRoot":""}