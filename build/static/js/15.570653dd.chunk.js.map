{"version":3,"sources":["Helper/index.ts","pages/Post/AddComment/AddComment.tsx","pages/Post/Comment/Comment.tsx"],"names":["formatDate","date","Intl","DateTimeFormat","year","month","day","format","Date","formatTime","hour","minute","emailValidation","email","match","getBlockStyle","block","getType","extractFromDraft","content","draft","JSON","parse","blocksWithText","blocks","filter","b","text","length","title","type","p","imgUrl","entityMap","data","url","validateDraft","blockHaveHeader1","blockHaveText","undefined","AddComment","props","useState","commenter","comment","post","postId","state","setState","dataDispatch","useContext","DataContext","dataService","DataServices","handleChange","e","target","name","value","className","onSubmit","preventDefault","addComment","error","console","log","htmlFor","onChange","rows","cols","Comment","isOpen","setIsOpen","comments","map","CommentCard","key","_id","item","closeForm","createdAt"],"mappings":"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","file":"static/js/15.570653dd.chunk.js","sourcesContent":["import { RawDraftContentState, RawDraftContentBlock } from 'draft-js'\nimport { ContentBlock } from 'draft-js'\n\ntype DraftType = {\n  title: string\n  p: string\n  url: string\n}\n\nexport const formatDate = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    year: 'numeric',\n    month: 'short',\n    day: '2-digit',\n  }).format(new Date(date))\n\nexport const formatTime = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    hour: 'numeric',\n    minute: 'numeric',\n  }).format(new Date(date))\nexport const emailValidation = (email: string): RegExpMatchArray | null =>\n  email.match(/^([a-zA-Z0-9_\\-.]+)@([a-zA-Z0-9_\\-\\\\.]+)\\.([a-zA-Z]{2,5})$/)\n\nexport const getBlockStyle = (block: ContentBlock): string => {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote'\n    case 'unstyled':\n      return 'RichEditor-paragraph'\n    case 'CODE':\n      return 'RichEditor-blockcode'\n    case 'STRIKETHROUGH':\n      return 'RichEditor-strikethrough'\n    default:\n      return ''\n  }\n}\nexport const extractFromDraft = (content: string): DraftType => {\n  const draft: RawDraftContentState = JSON.parse(content)\n  const { blocks } = draft\n  const blocksWithText = blocks.filter((b: RawDraftContentBlock) => b.text.length)\n  const title = blocksWithText.filter((b: RawDraftContentBlock) => b.type === 'header-one')[0]\n  const p = blocksWithText.filter((b: RawDraftContentBlock) => b.type === 'unstyled')[0]\n  const imgUrl = draft.entityMap[0] ? draft.entityMap[0].data['src'] : null\n  return {\n    title: title.text,\n    p: p.text,\n    url: imgUrl,\n  }\n}\n\nexport const validateDraft = (content: string): boolean => {\n  const draft: RawDraftContentState = JSON.parse(content)\n  const { blocks } = draft\n  const blockHaveHeader1 = blocks.filter((block: RawDraftContentBlock) => block.type === 'header-one')[0]\n  const blockHaveText = blocks\n    .filter((block: RawDraftContentBlock) => block.type === 'unstyled')\n    .filter((b: RawDraftContentBlock) => b.text.length > 1)\n  return blockHaveHeader1 !== undefined && blockHaveText.length > 0\n}\nexport const formatDateAndTime = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    day: 'numeric',\n    month: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n  }).format(new Date(date))\n","import React, { useState, useContext, FormEvent, ChangeEvent } from 'react'\nimport { Button } from '../../../components/Button/Button'\nimport { DataContext } from '../../../contexts/dataContext'\nimport { DataServices } from 'services/dataService'\n\ninterface CommentForm {\n  closeForm: () => void\n  postId: string\n}\n\ninterface State {\n  commenter: string\n  email: string\n  comment: string\n  post: string\n}\n\nexport function AddComment(props: CommentForm): JSX.Element {\n  const [state, setState] = useState<State>({\n    commenter: '',\n    email: '',\n    comment: '',\n    post: props.postId,\n  })\n  const { dataDispatch } = useContext(DataContext)\n  const dataService = new DataServices(dataDispatch)\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    const { name, value } = e.target\n    setState({\n      ...state,\n      [name]: value,\n    })\n  }\n  const handleSubmit = (e: FormEvent): void => {\n    e.preventDefault()\n    try {\n      dataService.addComment(state)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const { commenter, email, comment } = state\n  return (\n    <div className=\"comment__form\">\n      <form className=\"form\" onSubmit={handleSubmit}>\n        <h3>Leave a comment</h3>\n        <div className=\"form__group\">\n          <label className=\"form__label\" htmlFor=\"commentor\">\n            Name\n          </label>\n          <input className=\"form__input\" type=\"text\" name=\"commenter\" value={commenter} onChange={handleChange} />\n        </div>\n        <div className=\"form__group\">\n          <label className=\"form__label\" htmlFor=\"email\">\n            Email\n          </label>\n          <input className=\"form__input\" type=\"email\" name=\"email\" value={email} onChange={handleChange} />\n        </div>\n        <div className=\"form__group\">\n          <label className=\"form__label\" htmlFor=\"comment\">\n            Comment\n          </label>\n          <textarea\n            className=\"form__textarea\"\n            name=\"comment\"\n            value={comment}\n            onChange={handleChange}\n            rows={3}\n            cols={12}\n          />\n        </div>\n        <div className=\"form__button\">\n          <Button text=\"Submit\" />\n        </div>\n      </form>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { formatDate, formatTime } from '../../../Helper'\nimport { AddComment } from '../AddComment/AddComment'\nimport { CommentInterface } from 'reducers/dataReducer'\n\ntype Props = {\n  comments: CommentInterface[]\n  postId: string\n}\n\nexport function Comment(props: Props): JSX.Element {\n  const [isOpen, setIsOpen] = useState(false)\n  const handleToggle = (): void => setIsOpen(!isOpen)\n  return (\n    <div className=\"comment\">\n      {props.comments.length ? <p className=\"comment__header\">Comments</p> : ''}\n      {props.comments.length > 0 &&\n        props.comments.map((comment: CommentInterface) => <CommentCard key={comment._id} item={comment} />)}\n      <AddComment closeForm={handleToggle} postId={props.postId} />\n    </div>\n  )\n}\n\nfunction CommentCard(props: { item: CommentInterface }): JSX.Element {\n  const { comment, commenter, createdAt } = props.item\n  return (\n    <div className=\"comment__card\">\n      <div className=\"comment__body\">\n        <div className=\"comment__title\">\n          <strong>{commenter}</strong>\n          <div className=\"comment__date\">\n            {formatDate(createdAt)}\n            &nbsp;{formatTime(createdAt)}\n          </div>\n        </div>\n        <p className=\"comment__text\">{comment}</p>\n      </div>\n    </div>\n  )\n}\n"],"sourceRoot":""}