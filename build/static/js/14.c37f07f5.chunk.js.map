{"version":3,"sources":["Helper/index.ts","pages/Home/LatestPost/LatestPost.tsx"],"names":["formatDate","date","Intl","DateTimeFormat","year","month","day","format","Date","formatTime","hour","minute","emailValidation","email","match","getBlockStyle","block","getType","extractFromDraft","content","draft","JSON","parse","blocksWithText","blocks","filter","b","text","length","title","type","p","imgUrl","entityMap","data","url","validateDraft","blockHaveHeader1","blockHaveText","console","log","undefined","LatestPost","blogs","useContext","DataContext","slice","className","map","blog","key","id","href","split","join","substring","dateTime","createdAt"],"mappings":"yGASA,4MAAO,IAAMA,EAAa,SAACC,GAAD,OACxB,IAAIC,KAAKC,eAAe,QAAS,CAC/BC,KAAM,UACNC,MAAO,QACPC,IAAK,YACJC,OAAO,IAAIC,KAAKP,KAERQ,EAAa,SAACR,GAAD,OACxB,IAAIC,KAAKC,eAAe,QAAS,CAC/BO,KAAM,UACNC,OAAQ,YACPJ,OAAO,IAAIC,KAAKP,KACRW,EAAkB,SAACC,GAAD,OAC7BA,EAAMC,MAAM,+DAEDC,EAAgB,SAACC,GAC5B,OAAQA,EAAMC,WACZ,IAAK,aACH,MAAO,wBACT,IAAK,WACH,MAAO,uBACT,IAAK,OACH,MAAO,uBACT,IAAK,gBACH,MAAO,2BACT,QACE,MAAO,KAGAC,EAAmB,SAACC,GAC/B,IAAMC,EAA8BC,KAAKC,MAAMH,GAEzCI,EADaH,EAAXI,OACsBC,QAAO,SAACC,GAAD,OAA6BA,EAAEC,KAAKC,UACnEC,EAAQN,EAAeE,QAAO,SAACC,GAAD,MAAwC,eAAXA,EAAEI,QAAuB,GACpFC,EAAIR,EAAeE,QAAO,SAACC,GAAD,MAAwC,aAAXA,EAAEI,QAAqB,GAC9EE,EAASZ,EAAMa,UAAU,GAAKb,EAAMa,UAAU,GAAGC,KAAnB,IAAiC,KACrE,MAAO,CACLL,MAAOA,EAAMF,KACbI,EAAGA,EAAEJ,KACLQ,IAAKH,IAIII,EAAgB,SAACjB,GAC5B,IACQK,EAD4BH,KAAKC,MAAMH,GACvCK,OACFa,EAAmBb,EAAOC,QAAO,SAACT,GAAD,MAAgD,eAAfA,EAAMc,QAAuB,GAC/FQ,EAAgBd,EACnBC,QAAO,SAACT,GAAD,MAAgD,aAAfA,EAAMc,QAC9CL,QAAO,SAACC,GAAD,OAA6BA,EAAEC,KAAKC,OAAS,KAEvD,OADAW,QAAQC,IAAIF,QACgBG,IAArBJ,GAAkCC,EAAcV,OAAS,I,gCC5DlE,uFAIO,SAASc,IAA2B,IAGnCC,EAFWC,qBAAWC,KAApBX,KAEWS,MAAMG,MAAM,EAAG,GAClC,OAAIH,EAAMf,OAAS,EACV,8BAGP,6BAASmB,UAAU,8BACjB,qDACCJ,EAAMK,KAAI,SAAAC,GAAI,OACb,yBAAKC,IAAKD,EAAKE,GAAIJ,UAAU,gBAC3B,yBAAKA,UAAU,uBACb,uBACEK,KAAI,gBAAWlC,YAAiB+B,EAAK9B,SAClCU,MAAMwB,MAAM,KACZC,KAAK,OAEPpC,YAAiB+B,EAAK9B,SAASU,QAGpC,2BAAIX,YAAiB+B,EAAK9B,SAASY,EAAEwB,UAAU,EAAG,KAAlD,OACA,yBAAKR,UAAU,sBACb,0BAAMS,SAAUP,EAAKQ,WAAYzD,YAAWiD,EAAKQ","file":"static/js/14.c37f07f5.chunk.js","sourcesContent":["import { RawDraftContentState, RawDraftContentBlock } from 'draft-js'\nimport { ContentBlock } from 'draft-js'\n\ntype DraftType = {\n  title: string\n  p: string\n  url: string\n}\n\nexport const formatDate = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    year: 'numeric',\n    month: 'short',\n    day: '2-digit',\n  }).format(new Date(date))\n\nexport const formatTime = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    hour: 'numeric',\n    minute: 'numeric',\n  }).format(new Date(date))\nexport const emailValidation = (email: string): RegExpMatchArray | null =>\n  email.match(/^([a-zA-Z0-9_\\-.]+)@([a-zA-Z0-9_\\-\\\\.]+)\\.([a-zA-Z]{2,5})$/)\n\nexport const getBlockStyle = (block: ContentBlock): string => {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote'\n    case 'unstyled':\n      return 'RichEditor-paragraph'\n    case 'CODE':\n      return 'RichEditor-blockcode'\n    case 'STRIKETHROUGH':\n      return 'RichEditor-strikethrough'\n    default:\n      return ''\n  }\n}\nexport const extractFromDraft = (content: string): DraftType => {\n  const draft: RawDraftContentState = JSON.parse(content)\n  const { blocks } = draft\n  const blocksWithText = blocks.filter((b: RawDraftContentBlock) => b.text.length)\n  const title = blocksWithText.filter((b: RawDraftContentBlock) => b.type === 'header-one')[0]\n  const p = blocksWithText.filter((b: RawDraftContentBlock) => b.type === 'unstyled')[0]\n  const imgUrl = draft.entityMap[0] ? draft.entityMap[0].data['src'] : null\n  return {\n    title: title.text,\n    p: p.text,\n    url: imgUrl,\n  }\n}\n\nexport const validateDraft = (content: string): boolean => {\n  const draft: RawDraftContentState = JSON.parse(content)\n  const { blocks } = draft\n  const blockHaveHeader1 = blocks.filter((block: RawDraftContentBlock) => block.type === 'header-one')[0]\n  const blockHaveText = blocks\n    .filter((block: RawDraftContentBlock) => block.type === 'unstyled')\n    .filter((b: RawDraftContentBlock) => b.text.length > 1)\n  console.log(blockHaveText)\n  return blockHaveHeader1 !== undefined && blockHaveText.length > 0\n}\nexport const formatDateAndTime = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    day: 'numeric',\n    month: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n  }).format(new Date(date))\n","import React, { useContext } from 'react'\nimport { DataContext } from 'contexts/dataContext'\nimport { extractFromDraft, formatDate } from 'Helper'\n\nexport function LatestPost(): JSX.Element {\n  const { data } = useContext(DataContext)\n\n  const blogs = data.blogs.slice(0, 3)\n  if (blogs.length < 1) {\n    return <div />\n  }\n  return (\n    <section className=\"latest col-sm-12 col-md-10\">\n      <h1>the latest blog posts</h1>\n      {blogs.map(blog => (\n        <div key={blog.id} className=\"latest__card\">\n          <div className=\"latest__card__title\">\n            <a\n              href={`/blog/${extractFromDraft(blog.content)\n                .title.split(' ')\n                .join('-')}`}\n            >\n              {extractFromDraft(blog.content).title}\n            </a>\n          </div>\n          <p>{extractFromDraft(blog.content).p.substring(0, 250)}...</p>\n          <div className=\"latest__card__date\">\n            <time dateTime={blog.createdAt}>{formatDate(blog.createdAt)}</time>\n          </div>\n        </div>\n      ))}\n    </section>\n  )\n}\n"],"sourceRoot":""}