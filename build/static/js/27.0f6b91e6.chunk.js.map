{"version":3,"sources":["Helper/index.ts","components/LatestPost/index.tsx"],"names":["formatDate","date","Intl","DateTimeFormat","year","month","day","format","Date","formatTime","hour","minute","emailValidation","email","match","getBlockStyle","block","getType","extractFromDraft","content","draft","JSON","parse","blocksWithText","blocks","filter","b","text","length","title","type","p","imgUrl","entityMap","data","url","formatDateAndTime","second","CardPost","post","className","to","split","join","src","alt","LastPost","lastPosts","useContext","DataContext","blogs","slice","map","blog","key","id"],"mappings":"yGASA,4MAAO,IAAMA,EAAa,SAACC,GAAD,OACxB,IAAIC,KAAKC,eAAe,QAAS,CAC/BC,KAAM,UACNC,MAAO,QACPC,IAAK,YACJC,OAAO,IAAIC,KAAKP,KAERQ,EAAa,SAACR,GAAD,OACxB,IAAIC,KAAKC,eAAe,QAAS,CAC/BO,KAAM,UACNC,OAAQ,YACPJ,OAAO,IAAIC,KAAKP,KACRW,EAAkB,SAACC,GAAD,OAC7BA,EAAMC,MAAM,+DAEDC,EAAgB,SAACC,GAC5B,OAAQA,EAAMC,WACZ,IAAK,aACH,MAAO,wBACT,IAAK,WACH,MAAO,uBACT,IAAK,OACH,MAAO,uBACT,IAAK,gBACH,MAAO,2BACT,QACE,MAAO,KAGAC,EAAmB,SAACC,GAC/B,IAAMC,EAA8BC,KAAKC,MAAMH,GAEzCI,EADaH,EAAXI,OACsBC,QAAO,SAACC,GAAD,OAA6BA,EAAEC,KAAKC,UACnEC,EAAQN,EAAeE,QAAO,SAACC,GAAD,MAAwC,eAAXA,EAAEI,QAAuB,GACpFC,EAAIR,EAAeE,QAAO,SAACC,GAAD,MAAwC,aAAXA,EAAEI,QAAqB,GAC9EE,EAASZ,EAAMa,UAAU,GAAKb,EAAMa,UAAU,GAAGC,KAAnB,IAAiC,KACrE,MAAO,CACLL,MAAOA,EAAMF,KACbI,EAAGA,EAAEJ,KACLQ,IAAKH,IAIII,EAAoB,SAACnC,GAAD,OAC/B,IAAIC,KAAKC,eAAe,QAAS,CAC/BG,IAAK,UACLD,MAAO,UACPD,KAAM,UACNM,KAAM,UACNC,OAAQ,UACR0B,OAAQ,YACP9B,OAAO,IAAIC,KAAKP,M,gCC5DrB,sIASO,SAASqC,EAAT,GAAiD,IAA7BC,EAA4B,EAA5BA,KACzB,OACE,yBAAKC,UAAU,gBACb,kBAAC,IAAD,CACEC,GAAE,gBAAWvB,YAAiBqB,EAAKpB,SAChCU,MAAMa,MAAM,KACZC,KAAK,OAER,yBAAKH,UAAU,oBAAoBI,IAAK1B,YAAiBqB,EAAKpB,SAASgB,IAAKU,IAAI,iBAChF,yBAAKL,UAAU,sBACb,uBAAGA,UAAU,sBAAsBtB,YAAiBqB,EAAKpB,SAASU,UAOrE,SAASiB,IAAyB,IAKjCC,EAFFC,qBAAWC,KADbf,KAAQgB,MAGcC,MAAM,EAAG,GAEjC,OACE,yBAAKX,UAAU,UACb,wBAAIA,UAAU,iBAAd,gBACA,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACZO,EAAUK,KAAI,SAACC,GAAD,OACb,kBAACf,EAAD,CAAUgB,IAAKD,EAAKE,GAAIhB,KAAMc","file":"static/js/27.0f6b91e6.chunk.js","sourcesContent":["import { RawDraftContentState, RawDraftContentBlock } from 'draft-js'\nimport { ContentBlock } from 'draft-js'\n\ntype DraftType = {\n  title: string\n  p: string\n  url: string\n}\n\nexport const formatDate = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    year: 'numeric',\n    month: 'short',\n    day: '2-digit',\n  }).format(new Date(date))\n\nexport const formatTime = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    hour: 'numeric',\n    minute: 'numeric',\n  }).format(new Date(date))\nexport const emailValidation = (email: string): RegExpMatchArray | null =>\n  email.match(/^([a-zA-Z0-9_\\-.]+)@([a-zA-Z0-9_\\-\\\\.]+)\\.([a-zA-Z]{2,5})$/)\n\nexport const getBlockStyle = (block: ContentBlock): string => {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote'\n    case 'unstyled':\n      return 'RichEditor-paragraph'\n    case 'CODE':\n      return 'RichEditor-blockcode'\n    case 'STRIKETHROUGH':\n      return 'RichEditor-strikethrough'\n    default:\n      return ''\n  }\n}\nexport const extractFromDraft = (content: string): DraftType => {\n  const draft: RawDraftContentState = JSON.parse(content)\n  const { blocks } = draft\n  const blocksWithText = blocks.filter((b: RawDraftContentBlock) => b.text.length)\n  const title = blocksWithText.filter((b: RawDraftContentBlock) => b.type === 'header-one')[0]\n  const p = blocksWithText.filter((b: RawDraftContentBlock) => b.type === 'unstyled')[0]\n  const imgUrl = draft.entityMap[0] ? draft.entityMap[0].data['src'] : null\n  return {\n    title: title.text,\n    p: p.text,\n    url: imgUrl,\n  }\n}\n\nexport const formatDateAndTime = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    day: 'numeric',\n    month: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n  }).format(new Date(date))\n","import React, { useContext } from 'react'\nimport { extractFromDraft } from '../../Helper'\nimport { DataContext } from 'contexts/dataContext'\nimport { BlogType } from '../Blog'\nimport { Link } from 'react-router-dom'\n\ntype Props = {\n  post: BlogType\n}\nexport function CardPost({ post }: Props): JSX.Element {\n  return (\n    <div className=\"latest__card\">\n      <Link\n        to={`/blog/${extractFromDraft(post.content)\n          .title.split(' ')\n          .join('-')}`}\n      >\n        <img className=\"latest__card__img\" src={extractFromDraft(post.content).url} alt=\"related post\" />\n        <div className=\"latest__card__body\">\n          <p className=\"latest__card__text\">{extractFromDraft(post.content).title}</p>\n        </div>\n      </Link>\n    </div>\n  )\n}\n\nexport function LastPost(): JSX.Element {\n  const {\n    data: { blogs },\n  } = useContext(DataContext)\n\n  const lastPosts = blogs.slice(0, 3)\n\n  return (\n    <div className=\"latest\">\n      <h2 className=\"latest__title\">Latest posts</h2>\n      <div className=\"latest__line\"></div>\n      <div className=\"latest__posts\">\n        {lastPosts.map((blog: BlogType) => (\n          <CardPost key={blog.id} post={blog} />\n        ))}\n      </div>\n    </div>\n  )\n}\n"],"sourceRoot":""}