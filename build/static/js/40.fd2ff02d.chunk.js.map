{"version":3,"sources":["Helper/index.ts","components/PostBlock/PostBlock.tsx","components/Jumbotron/Jumbotron.tsx"],"names":["formatDate","date","Intl","DateTimeFormat","year","month","day","format","Date","formatTime","hour","minute","emailValidation","email","match","getBlockStyle","block","getType","extractFromDraft","content","draft","JSON","parse","blocksWithText","blocks","filter","b","text","length","title","type","p","imgUrl","entityMap","data","url","formatDateAndTime","second","BlockCard","key","id","className","createdAt","target","rel","href","split","join","PostBlock","sortPosts","useContext","DataContext","blogs","slice","map","Jumbotron","style","backgroundImage","substring"],"mappings":"4GASA,4MAAO,IAAMA,EAAa,SAACC,GAAD,OACxB,IAAIC,KAAKC,eAAe,QAAS,CAC/BC,KAAM,UACNC,MAAO,QACPC,IAAK,YACJC,OAAO,IAAIC,KAAKP,KAERQ,EAAa,SAACR,GAAD,OACxB,IAAIC,KAAKC,eAAe,QAAS,CAC/BO,KAAM,UACNC,OAAQ,YACPJ,OAAO,IAAIC,KAAKP,KACRW,EAAkB,SAACC,GAAD,OAC7BA,EAAMC,MAAM,+DAEDC,EAAgB,SAACC,GAC5B,OAAQA,EAAMC,WACZ,IAAK,aACH,MAAO,wBACT,IAAK,WACH,MAAO,uBACT,IAAK,OACH,MAAO,uBACT,IAAK,gBACH,MAAO,2BACT,QACE,MAAO,KAGAC,EAAmB,SAACC,GAC/B,IAAMC,EAA8BC,KAAKC,MAAMH,GAEzCI,EADaH,EAAXI,OACsBC,QAAO,SAACC,GAAD,OAA6BA,EAAEC,KAAKC,UACnEC,EAAQN,EAAeE,QAAO,SAACC,GAAD,MAAwC,eAAXA,EAAEI,QAAuB,GACpFC,EAAIR,EAAeE,QAAO,SAACC,GAAD,MAAwC,aAAXA,EAAEI,QAAqB,GAC9EE,EAASZ,EAAMa,UAAU,GAAKb,EAAMa,UAAU,GAAGC,KAAnB,IAAiC,KACrE,MAAO,CACLL,MAAOA,EAAMF,KACbI,EAAGA,EAAEJ,KACLQ,IAAKH,IAIII,EAAoB,SAACnC,GAAD,OAC/B,IAAIC,KAAKC,eAAe,QAAS,CAC/BG,IAAK,UACLD,MAAO,UACPD,KAAM,UACNM,KAAM,UACNC,OAAQ,UACR0B,OAAQ,YACP9B,OAAO,IAAIC,KAAKP,M,gCC5DrB,gIAWO,SAASqC,EAAT,GAAuD,IAAlCtB,EAAiC,EAAjCA,MAC1B,OACE,yBAAKuB,IAAKvB,EAAMwB,GAAIC,UAAU,gBAC5B,0BAAMA,UAAU,eAAeL,YAAkBpB,EAAM0B,YACvD,uBACED,UAAU,cACVE,OAAO,SACPC,IAAI,sBACJC,KAAI,gBAAW3B,YAAiBF,EAAMG,SACnCU,MAAMiB,MAAM,KACZC,KAAK,OAEP7B,YAAiBF,EAAMG,SAASU,QAMlC,SAASmB,IAA0B,IAIlCC,EADFC,qBAAWC,KADbjB,KAAQkB,MAEcC,MAAM,GAC9B,OACE,yBAAKZ,UAAU,SACb,wBAAIA,UAAU,gBAAd,gBACA,yBAAKA,UAAU,kBACZQ,EAAUK,KAAI,SAACtC,GAAD,OACb,kBAACsB,EAAD,CAAWC,IAAKvB,EAAMwB,GAAIxB,MAAOA,W,gCCvC3C,8FAKO,SAASuC,IAA0B,IAE9BH,EACNF,qBAAWC,KADbjB,KAAQkB,MAEV,OAAKA,EAAM,GAKT,yBACEX,UAAU,YACVe,MAAO,CACLC,gBAAgB,OAAD,OAASvC,YAAiBkC,EAAM,GAAGjC,SAASgB,IAA5C,OAGjB,yBAAKM,UAAU,sBACb,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,oBAAoBvB,YAAiBkC,EAAM,GAAGjC,SAASU,OACrE,uBAAGY,UAAU,mBAAmBvB,YAAiBkC,EAAM,GAAGjC,SAASY,EAAE2B,UAAU,EAAG,KAAlF,OACA,uBACEb,KAAI,gBAAW3B,YAAiBkC,EAAM,GAAGjC,SACtCU,MAAMiB,MAAM,KACZC,KAAK,MACRN,UAAU,oBACVG,IAAI,sBACJD,OAAO,UANT,cAWDS,EAAMxB,OAAS,GAAK,kBAAC,YAAD,QAzBlB","file":"static/js/40.fd2ff02d.chunk.js","sourcesContent":["import { RawDraftContentState, RawDraftContentBlock } from 'draft-js'\nimport { ContentBlock } from 'draft-js'\n\ntype DraftType = {\n  title: string\n  p: string\n  url: string\n}\n\nexport const formatDate = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    year: 'numeric',\n    month: 'short',\n    day: '2-digit',\n  }).format(new Date(date))\n\nexport const formatTime = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    hour: 'numeric',\n    minute: 'numeric',\n  }).format(new Date(date))\nexport const emailValidation = (email: string): RegExpMatchArray | null =>\n  email.match(/^([a-zA-Z0-9_\\-.]+)@([a-zA-Z0-9_\\-\\\\.]+)\\.([a-zA-Z]{2,5})$/)\n\nexport const getBlockStyle = (block: ContentBlock): string => {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote'\n    case 'unstyled':\n      return 'RichEditor-paragraph'\n    case 'CODE':\n      return 'RichEditor-blockcode'\n    case 'STRIKETHROUGH':\n      return 'RichEditor-strikethrough'\n    default:\n      return ''\n  }\n}\nexport const extractFromDraft = (content: string): DraftType => {\n  const draft: RawDraftContentState = JSON.parse(content)\n  const { blocks } = draft\n  const blocksWithText = blocks.filter((b: RawDraftContentBlock) => b.text.length)\n  const title = blocksWithText.filter((b: RawDraftContentBlock) => b.type === 'header-one')[0]\n  const p = blocksWithText.filter((b: RawDraftContentBlock) => b.type === 'unstyled')[0]\n  const imgUrl = draft.entityMap[0] ? draft.entityMap[0].data['src'] : null\n  return {\n    title: title.text,\n    p: p.text,\n    url: imgUrl,\n  }\n}\n\nexport const formatDateAndTime = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    day: 'numeric',\n    month: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n  }).format(new Date(date))\n","import React, { useContext } from 'react'\nimport { BlogType } from '../Blog/Blog'\nimport { extractFromDraft, formatDateAndTime } from '../../Helper'\nimport { DataContext } from 'contexts/dataContext'\n\ninterface Props {\n  posts: BlogType[]\n}\ntype BlockType = {\n  block: BlogType\n}\nexport function BlockCard({ block }: BlockType): JSX.Element {\n  return (\n    <div key={block.id} className=\"block__items\">\n      <time className=\"block__time\">{formatDateAndTime(block.createdAt)}</time>\n      <a\n        className=\"block__link\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href={`/blog/${extractFromDraft(block.content)\n          .title.split(' ')\n          .join('-')}`}\n      >\n        {extractFromDraft(block.content).title}\n      </a>\n    </div>\n  )\n}\n\nexport function PostBlock(): JSX.Element {\n  const {\n    data: { blogs },\n  } = useContext(DataContext)\n  const sortPosts = blogs.slice(1)\n  return (\n    <div className=\"block\">\n      <h2 className=\"block__title\">Latest Posts</h2>\n      <div className=\"block__content\">\n        {sortPosts.map((block: BlogType) => (\n          <BlockCard key={block.id} block={block} />\n        ))}\n      </div>\n    </div>\n  )\n}\n","import React, { useContext } from 'react'\nimport { PostBlock } from '../PostBlock/PostBlock'\nimport { extractFromDraft } from '../../Helper'\nimport { DataContext } from 'contexts/dataContext'\n\nexport function Jumbotron(): JSX.Element {\n  const {\n    data: { blogs },\n  } = useContext(DataContext)\n  if (!blogs[0]) {\n    return <div></div>\n  }\n\n  return (\n    <div\n      className=\"jumbotron\"\n      style={{\n        backgroundImage: `url(${extractFromDraft(blogs[0].content).url})`,\n      }}\n    >\n      <div className=\"jumbotron__overlay\">\n        <div className=\"jumbotron__post\">\n          <h1 className=\"jumbotron__title\">{extractFromDraft(blogs[0].content).title}</h1>\n          <p className=\"jumbotron__text\">{extractFromDraft(blogs[0].content).p.substring(0, 200)}...</p>\n          <a\n            href={`/blog/${extractFromDraft(blogs[0].content)\n              .title.split(' ')\n              .join('-')}`}\n            className=\"jumbotron__button\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Read more\n          </a>\n        </div>\n        {blogs.length > 1 && <PostBlock />}\n      </div>\n    </div>\n  )\n}\n"],"sourceRoot":""}