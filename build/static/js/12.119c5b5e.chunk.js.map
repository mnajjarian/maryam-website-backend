{"version":3,"sources":["Helper/index.ts","assets/icons/bubble.svg","pages/Blog/CardPost/CardPost.tsx"],"names":["formatDate","date","Intl","DateTimeFormat","year","month","day","format","Date","formatTime","hour","minute","emailValidation","email","match","getBlockStyle","block","getType","extractFromDraft","content","draft","JSON","parse","blocksWithText","blocks","filter","b","text","length","title","type","p","imgUrl","entityMap","data","url","validateDraft","blockHaveHeader1","blockHaveText","console","log","undefined","module","exports","CardPost","props","post","className","to","split","join","comments","src","IconBubble","alt","dateTime","createdAt"],"mappings":"yGASA,4MAAO,IAAMA,EAAa,SAACC,GAAD,OACxB,IAAIC,KAAKC,eAAe,QAAS,CAC/BC,KAAM,UACNC,MAAO,QACPC,IAAK,YACJC,OAAO,IAAIC,KAAKP,KAERQ,EAAa,SAACR,GAAD,OACxB,IAAIC,KAAKC,eAAe,QAAS,CAC/BO,KAAM,UACNC,OAAQ,YACPJ,OAAO,IAAIC,KAAKP,KACRW,EAAkB,SAACC,GAAD,OAC7BA,EAAMC,MAAM,+DAEDC,EAAgB,SAACC,GAC5B,OAAQA,EAAMC,WACZ,IAAK,aACH,MAAO,wBACT,IAAK,WACH,MAAO,uBACT,IAAK,OACH,MAAO,uBACT,IAAK,gBACH,MAAO,2BACT,QACE,MAAO,KAGAC,EAAmB,SAACC,GAC/B,IAAMC,EAA8BC,KAAKC,MAAMH,GAEzCI,EADaH,EAAXI,OACsBC,QAAO,SAACC,GAAD,OAA6BA,EAAEC,KAAKC,UACnEC,EAAQN,EAAeE,QAAO,SAACC,GAAD,MAAwC,eAAXA,EAAEI,QAAuB,GACpFC,EAAIR,EAAeE,QAAO,SAACC,GAAD,MAAwC,aAAXA,EAAEI,QAAqB,GAC9EE,EAASZ,EAAMa,UAAU,GAAKb,EAAMa,UAAU,GAAGC,KAAnB,IAAiC,KACrE,MAAO,CACLL,MAAOA,EAAMF,KACbI,EAAGA,EAAEJ,KACLQ,IAAKH,IAIII,EAAgB,SAACjB,GAC5B,IACQK,EAD4BH,KAAKC,MAAMH,GACvCK,OACFa,EAAmBb,EAAOC,QAAO,SAACT,GAAD,MAAgD,eAAfA,EAAMc,QAAuB,GAC/FQ,EAAgBd,EACnBC,QAAO,SAACT,GAAD,MAAgD,aAAfA,EAAMc,QAC9CL,QAAO,SAACC,GAAD,OAA6BA,EAAEC,KAAKC,OAAS,KAEvD,OADAW,QAAQC,IAAIF,QACgBG,IAArBJ,GAAkCC,EAAcV,OAAS,I,oBC5DlEc,EAAOC,QAAU,IAA0B,oC,gCCA3C,sGAYO,SAASC,EAASC,GAAgC,IAErDC,EAEED,EAFFC,KACQ3B,EACN0B,EADFC,KAAQ3B,QAIJI,EAF8BF,KAAKC,MAAMH,GACvCK,OACsBC,QAAO,SAACC,GAAD,OAA6BA,EAAEC,KAAKC,UACnEC,EAAQN,EAAeE,QAAO,SAACC,GAAD,MAAwC,eAAXA,EAAEI,QAAuB,GACpFC,EAAIR,EAAeE,QAAO,SAACC,GAAD,MAAwC,aAAXA,EAAEI,QAAqB,GAGpF,OACE,yBAAKiB,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAAMC,GAAE,gBAAWnB,EAAMF,KAAKsB,MAAM,KAAKC,KAAK,MAAQH,UAAU,eAC9D,4BAAKlB,EAAMF,OAEZmB,EAAKK,SAASvB,OAAS,GACtB,yBAAKmB,UAAU,cACb,8BAAOD,EAAKK,SAASvB,QACrB,yBAAKwB,IAAKC,IAAYC,IAAI,mBAIhC,yBAAKP,UAAU,cAAchB,EAAEJ,MAC/B,yBAAKoB,UAAU,gBACb,0BAAMQ,SAAUT,EAAKU,WAAYxD,YAAW8C,EAAKU","file":"static/js/12.119c5b5e.chunk.js","sourcesContent":["import { RawDraftContentState, RawDraftContentBlock } from 'draft-js'\nimport { ContentBlock } from 'draft-js'\n\ntype DraftType = {\n  title: string\n  p: string\n  url: string\n}\n\nexport const formatDate = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    year: 'numeric',\n    month: 'short',\n    day: '2-digit',\n  }).format(new Date(date))\n\nexport const formatTime = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    hour: 'numeric',\n    minute: 'numeric',\n  }).format(new Date(date))\nexport const emailValidation = (email: string): RegExpMatchArray | null =>\n  email.match(/^([a-zA-Z0-9_\\-.]+)@([a-zA-Z0-9_\\-\\\\.]+)\\.([a-zA-Z]{2,5})$/)\n\nexport const getBlockStyle = (block: ContentBlock): string => {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote'\n    case 'unstyled':\n      return 'RichEditor-paragraph'\n    case 'CODE':\n      return 'RichEditor-blockcode'\n    case 'STRIKETHROUGH':\n      return 'RichEditor-strikethrough'\n    default:\n      return ''\n  }\n}\nexport const extractFromDraft = (content: string): DraftType => {\n  const draft: RawDraftContentState = JSON.parse(content)\n  const { blocks } = draft\n  const blocksWithText = blocks.filter((b: RawDraftContentBlock) => b.text.length)\n  const title = blocksWithText.filter((b: RawDraftContentBlock) => b.type === 'header-one')[0]\n  const p = blocksWithText.filter((b: RawDraftContentBlock) => b.type === 'unstyled')[0]\n  const imgUrl = draft.entityMap[0] ? draft.entityMap[0].data['src'] : null\n  return {\n    title: title.text,\n    p: p.text,\n    url: imgUrl,\n  }\n}\n\nexport const validateDraft = (content: string): boolean => {\n  const draft: RawDraftContentState = JSON.parse(content)\n  const { blocks } = draft\n  const blockHaveHeader1 = blocks.filter((block: RawDraftContentBlock) => block.type === 'header-one')[0]\n  const blockHaveText = blocks\n    .filter((block: RawDraftContentBlock) => block.type === 'unstyled')\n    .filter((b: RawDraftContentBlock) => b.text.length > 1)\n  console.log(blockHaveText)\n  return blockHaveHeader1 !== undefined && blockHaveText.length > 0\n}\nexport const formatDateAndTime = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    day: 'numeric',\n    month: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n  }).format(new Date(date))\n","module.exports = __webpack_public_path__ + \"static/media/bubble.3eaa3469.svg\";","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { RawDraftContentBlock, RawDraftContentState } from 'draft-js'\nimport { BlogType } from '../Blog'\nimport { formatDate } from '../../../Helper'\nimport IconBubble from '../../../assets/icons/bubble.svg'\n\ntype PostProps = {\n  post: BlogType\n  type?: string\n}\n\nexport function CardPost(props: PostProps): JSX.Element {\n  const {\n    post,\n    post: { content },\n  } = props\n  const draft: RawDraftContentState = JSON.parse(content)\n  const { blocks } = draft\n  const blocksWithText = blocks.filter((b: RawDraftContentBlock) => b.text.length)\n  const title = blocksWithText.filter((b: RawDraftContentBlock) => b.type === 'header-one')[0]\n  const p = blocksWithText.filter((b: RawDraftContentBlock) => b.type === 'unstyled')[0]\n  //const imgUrl: string = draft.entityMap[0] ? draft.entityMap[0].data['src'] : null\n\n  return (\n    <div className=\"card\">\n      <div className=\"card__header\">\n        <Link to={`/blog/${title.text.split(' ').join('-')}`} className=\"card__title\">\n          <h5>{title.text}</h5>\n        </Link>\n        {post.comments.length > 0 && (\n          <div className=\"card__icon\">\n            <span>{post.comments.length}</span>\n            <img src={IconBubble} alt=\"comment icon\" />\n          </div>\n        )}\n      </div>\n      <div className=\"card__text\">{p.text}</div>\n      <div className=\"card__footer\">\n        <time dateTime={post.createdAt}>{formatDate(post.createdAt)}</time>\n      </div>\n    </div>\n  )\n}\n"],"sourceRoot":""}