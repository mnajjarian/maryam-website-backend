{"version":3,"sources":["Helper/index.ts","components/Button/Button.tsx","components/Modal/Modal.tsx","components/Table/Table.tsx","components/Dashboard/CommentList/CommentList.tsx","components/Dashboard/PostTable/PostTable.tsx"],"names":["formatDate","date","Intl","DateTimeFormat","year","month","day","format","Date","formatTime","hour","minute","emailValidation","email","match","getBlockStyle","block","getType","extractFromDraft","content","draft","JSON","parse","blocksWithText","blocks","filter","b","text","length","title","type","p","imgUrl","entityMap","data","url","formatDateAndTime","second","Button","handleClick","className","onClick","modalRoot","document","createElement","Modal","props","toggleModal","children","useEffect","body","appendChild","removeChild","createPortal","Table","heads","map","head","key","CommentRow","item","comment","commenter","_id","index","handleDelete","CommentList","dataService","useContext","DataContext","commentId","removeComment","comments","BlogRow","createdAt","updatedAt","id","toISOString","slice","href","split","join","e","to","PostTable","useState","isOpen","setIsOpen","post","setComments","blogs","blogId","window","confirm","removePost","toggle","commentList","preventDefault","blog"],"mappings":"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","file":"static/js/2.de3de68d.chunk.js","sourcesContent":["import { RawDraftContentState, RawDraftContentBlock } from 'draft-js'\nimport { ContentBlock } from 'draft-js'\n\ntype DraftType = {\n  title: string\n  p: string\n  url: string\n}\n\nexport const formatDate = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    year: 'numeric',\n    month: 'short',\n    day: '2-digit',\n  }).format(new Date(date))\n\nexport const formatTime = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    hour: 'numeric',\n    minute: 'numeric',\n  }).format(new Date(date))\nexport const emailValidation = (email: string): RegExpMatchArray | null =>\n  email.match(/^([a-zA-Z0-9_\\-.]+)@([a-zA-Z0-9_\\-\\\\.]+)\\.([a-zA-Z]{2,5})$/)\n\nexport const getBlockStyle = (block: ContentBlock): string => {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote'\n    case 'unstyled':\n      return 'RichEditor-paragraph'\n    case 'CODE':\n      return 'RichEditor-blockcode'\n    case 'STRIKETHROUGH':\n      return 'RichEditor-strikethrough'\n    default:\n      return ''\n  }\n}\nexport const extractFromDraft = (content: string): DraftType => {\n  const draft: RawDraftContentState = JSON.parse(content)\n  const { blocks } = draft\n  const blocksWithText = blocks.filter((b: RawDraftContentBlock) => b.text.length)\n  const title = blocksWithText.filter((b: RawDraftContentBlock) => b.type === 'header-one')[0]\n  const p = blocksWithText.filter((b: RawDraftContentBlock) => b.type === 'unstyled')[0]\n  const imgUrl = draft.entityMap[0] ? draft.entityMap[0].data['src'] : null\n  return {\n    title: title.text,\n    p: p.text,\n    url: imgUrl,\n  }\n}\n\nexport const formatDateAndTime = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    day: 'numeric',\n    month: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n  }).format(new Date(date))\n","import React from 'react'\n\ntype ButtonProps = {\n  text: string\n  handleClick?: () => void\n}\nexport function Button({ text, handleClick }: ButtonProps): JSX.Element {\n  return (\n    <button type=\"submit\" className=\"button\" onClick={handleClick}>\n      {text}\n    </button>\n  )\n}\n","import React, { useEffect, ReactNode } from 'react'\nimport { createPortal } from 'react-dom'\n\ntype Props = {\n  children: ReactNode\n  toggleModal: () => void\n}\n\nconst modalRoot = document.createElement('portal')\n\nexport function Modal(props: Props): React.ReactElement | null {\n  const { toggleModal, children } = props\n  useEffect(() => {\n    document.body.appendChild(modalRoot)\n\n    return (): void => {\n      document.body.removeChild(modalRoot)\n    }\n  }, [])\n\n  return createPortal(\n    <div className=\"modal\">\n      <div className=\"modal__overlay\" onClick={toggleModal} />\n      <div className=\"modal__body\">{children}</div>\n    </div>,\n    modalRoot as HTMLElement,\n  )\n}\n","import React, { ReactNode } from 'react'\n\ninterface TableProps {\n  children: ReactNode\n  heads: string[]\n}\nexport function Table(props: TableProps): JSX.Element {\n  return (\n    <table>\n      <thead>\n        <tr>\n          {props.heads.map(head => (\n            <th key={head}>{head}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>{props.children}</tbody>\n    </table>\n  )\n}\n","import React, { useContext } from 'react'\nimport { CommentInterface } from '../../Blog/Blog'\nimport { Button } from '../../Button/Button'\nimport { DataContext } from '../../../contexts/dataContext'\nimport { Table } from '../../Table/Table'\n\ntype Props = {\n  comments: CommentInterface[]\n}\n\ntype TableRow = {\n  item: CommentInterface\n  index: number\n  handleDelete: (args: string) => () => void\n}\nexport function CommentRow(props: TableRow): JSX.Element {\n  const {\n    item: { comment, commenter, email, _id },\n    index,\n    handleDelete,\n  } = props\n  return (\n    <tr>\n      <td>{index + 1}</td>\n      <td>{comment}</td>\n      <td>{commenter}</td>\n      <td>{email}</td>\n      <td>\n        <Button text=\"Delete\" handleClick={handleDelete(_id)} />\n      </td>\n    </tr>\n  )\n}\n\nexport function CommentList(props: Props): JSX.Element {\n  const { dataService } = useContext(DataContext)\n  const handleDelete = (commentId: string) => (): void => {\n    dataService.removeComment(commentId)\n  }\n\n  const heads = ['number', 'comment', 'commenter', 'email', 'action']\n\n  return (\n    <div className=\"comments\">\n      <Table heads={heads}>\n        {props.comments.map((comment: CommentInterface, index: number) => (\n          <CommentRow item={comment} key={comment._id} index={index} handleDelete={handleDelete} />\n        ))}\n      </Table>\n    </div>\n  )\n}\n","import React, { useContext, useState, MouseEvent } from 'react'\nimport { DataContext } from '../../../contexts/dataContext'\nimport { Button } from '../../Button/Button'\nimport { BlogType, CommentInterface } from '../../Blog/Blog'\nimport { extractFromDraft } from '../../../Helper'\nimport { Modal } from '../../Modal/Modal'\nimport { CommentList } from '../CommentList/CommentList'\nimport { Table } from 'components/Table/Table'\nimport { Link } from 'react-router-dom'\n\ntype TableRow = {\n  item: BlogType\n  index: number\n  handleClick: (id: string) => () => void\n  toggleModal: (e: MouseEvent<HTMLAnchorElement>, comments: CommentInterface[]) => void\n}\nfunction BlogRow(props: TableRow): JSX.Element {\n  const {\n    item: { comments, content, createdAt, updatedAt, id },\n    index,\n    toggleModal,\n    handleClick,\n  } = props\n  const date = (date: string): JSX.Element => <td>{new Date(date).toISOString().slice(0, 10)}</td>\n  return (\n    <tr>\n      <td>{index + 1}</td>\n      <td>\n        <a\n          href={`/blog/${extractFromDraft(content)\n            .title.split(' ')\n            .join('-')}`}\n        >\n          {extractFromDraft(content).title}\n        </a>\n      </td>\n      {date(createdAt)}\n      {date(updatedAt)}\n      <td>\n        <a href=\"/#\" onClick={(e: MouseEvent<HTMLAnchorElement>): void => toggleModal(e, comments)}>\n          {comments.length}\n        </a>\n      </td>\n      <td>\n        <Link to={`/dashboard/edit/${id}`}>\n          <Button text=\"Edit\" />\n        </Link>\n      </td>\n      <td>\n        <Button text=\"Delete\" handleClick={handleClick(id)} />\n      </td>\n    </tr>\n  )\n}\n\nexport function PostTable(): JSX.Element {\n  const [isOpen, setIsOpen] = useState(false)\n  const [comments, setComments] = useState<CommentInterface[]>([\n    {\n      commenter: '',\n      email: '',\n      comment: '',\n      createdAt: '',\n      _id: '',\n      post: '',\n    },\n  ])\n  const {\n    data: { blogs },\n    dataService,\n  } = useContext(DataContext)\n  if (!blogs.length) {\n    return <div className=\"posts\">You do not have any post in your blog.</div>\n  }\n\n  const toggleModal = (): void => setIsOpen(!isOpen)\n  const handleClick = (blogId: string) => (): void | null => {\n    const alert = 'Are you sure you want to delete this post?'\n    if (window.confirm(alert)) {\n      dataService.removePost(blogId)\n    } else {\n      return null\n    }\n  }\n\n  const toggle = (e: MouseEvent<HTMLAnchorElement>, commentList: CommentInterface[]): void => {\n    e.preventDefault()\n    setComments(commentList)\n    setIsOpen(!isOpen)\n  }\n  const heads = ['post', 'title', 'created', 'updated', 'comments', 'edit', 'delete']\n  return (\n    <div className=\"posts\">\n      {isOpen && (\n        <Modal toggleModal={toggleModal}>\n          <CommentList comments={comments} />\n        </Modal>\n      )}\n      <div className=\"posts-table\">\n        <Table heads={heads}>\n          {blogs.map((blog: BlogType, index: number) => (\n            <BlogRow key={blog.id} item={blog} index={index} toggleModal={toggle} handleClick={handleClick} />\n          ))}\n        </Table>\n      </div>\n    </div>\n  )\n}\n"],"sourceRoot":""}