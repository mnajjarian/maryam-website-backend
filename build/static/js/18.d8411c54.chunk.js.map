{"version":3,"sources":["components/Button/index.tsx","Helper/index.ts","components/AddComment/index.tsx","components/Comment/index.tsx"],"names":["Button","text","handleClick","type","className","onClick","formatDate","date","Intl","DateTimeFormat","year","month","day","format","Date","formatTime","hour","minute","emailValidation","email","match","getBlockStyle","block","getType","extractFromDraft","content","draft","JSON","parse","blocksWithText","blocks","filter","b","length","title","p","imgUrl","entityMap","data","url","formatDateAndTime","second","AddComment","props","useState","commenter","comment","post","postId","state","setState","dataService","useContext","DataContext","handleChange","e","target","name","value","onSubmit","preventDefault","addComment","error","console","log","htmlFor","onChange","rows","cols","CommentCard","item","createdAt","Comment","isOpen","setIsOpen","comments","map","key","_id","closeForm"],"mappings":"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","file":"static/js/18.d8411c54.chunk.js","sourcesContent":["import React from 'react';\n\ninterface ButtonProps {\n    text: string;\n    handleClick?: () => void;\n}\nconst Button: React.FC<ButtonProps> = ({ text, handleClick }) => {    \n    return(\n        <button type=\"submit\" className=\"button\" onClick={handleClick} >{text}</button>\n    );\n};\n\nexport default Button;","import { RawDraftContentState, RawDraftContentBlock } from 'draft-js'\nimport { ContentBlock } from 'draft-js'\n\ntype DraftType = {\n  title: string\n  p: string\n  url: string\n}\n\nexport const formatDate = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    year: 'numeric',\n    month: 'short',\n    day: '2-digit',\n  }).format(new Date(date))\n\nexport const formatTime = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    hour: 'numeric',\n    minute: 'numeric',\n  }).format(new Date(date))\nexport const emailValidation = (email: string): RegExpMatchArray | null =>\n  email.match(/^([a-zA-Z0-9_\\-.]+)@([a-zA-Z0-9_\\-\\\\.]+)\\.([a-zA-Z]{2,5})$/)\n\nexport const getBlockStyle = (block: ContentBlock): string => {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote'\n    case 'unstyled':\n      return 'RichEditor-paragraph'\n    case 'CODE':\n      return 'RichEditor-blockcode'\n    case 'STRIKETHROUGH':\n      return 'RichEditor-strikethrough'\n    default:\n      return ''\n  }\n}\nexport const extractFromDraft = (content: string): DraftType => {\n  const draft: RawDraftContentState = JSON.parse(content)\n  const { blocks } = draft\n  const blocksWithText = blocks.filter((b: RawDraftContentBlock) => b.text.length)\n  const title = blocksWithText.filter((b: RawDraftContentBlock) => b.type === 'header-one')[0]\n  const p = blocksWithText.filter((b: RawDraftContentBlock) => b.type === 'unstyled')[0]\n  const imgUrl = draft.entityMap[0] ? draft.entityMap[0].data['src'] : null\n  return {\n    title: title.text,\n    p: p.text,\n    url: imgUrl,\n  }\n}\n\nexport const formatDateAndTime = (date: string): string =>\n  new Intl.DateTimeFormat('en-us', {\n    day: 'numeric',\n    month: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n  }).format(new Date(date))\n","import React, { useState, useContext, FormEvent, ChangeEvent } from 'react'\nimport Button from '../Button'\nimport { DataContext } from '../../contexts/dataContext'\n\ninterface CommentForm {\n  closeForm: () => void\n  postId: string\n}\n\ninterface State {\n  commenter: string\n  email: string\n  comment: string\n  post: string\n}\n\nconst AddComment = (props: CommentForm) => {\n  const [state, setState] = useState<State>({\n    commenter: '',\n    email: '',\n    comment: '',\n    post: props.postId,\n  })\n  const { dataService } = useContext(DataContext)\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target\n    setState({\n      ...state,\n      [name]: value,\n    })\n  }\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault()\n    try {\n      dataService.addComment(state)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const { commenter, email, comment } = state\n  return (\n    <div className=\"comments\">\n      <form className=\"form\" onSubmit={handleSubmit}>\n        <h3>Leave a comment</h3>\n        <div className=\"form__group\">\n          <label className=\"form__label\" htmlFor=\"commentor\">\n            Name\n          </label>\n          <input className=\"form__input\" type=\"text\" name=\"commenter\" value={commenter} onChange={handleChange} />\n        </div>\n        <div className=\"form__group\">\n          <label className=\"form__label\" htmlFor=\"email\">\n            Email\n          </label>\n          <input className=\"form__input\" type=\"email\" name=\"email\" value={email} onChange={handleChange} />\n        </div>\n        <div className=\"form__group\">\n          <label className=\"form__label\" htmlFor=\"comment\">\n            Comment\n          </label>\n          <textarea\n            className=\"form__textarea\"\n            name=\"comment\"\n            value={comment}\n            onChange={handleChange}\n            rows={7}\n            cols={12}\n          />\n        </div>\n        <div className=\"form__button\">\n          {/*           <Button text=\"Cancel\" handleClick={closeForm} /> */}\n          <Button text=\"Submit\" />\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default AddComment\n","import React, { useState } from 'react'\nimport { CommentInterface } from '../Blog'\nimport { formatDate, formatTime } from '../../Helper'\nimport AddComment from '../AddComment'\n\ntype Props = {\n  comments: CommentInterface[]\n  postId: string\n}\n\nfunction Comment(props: Props): JSX.Element {\n  const [isOpen, setIsOpen] = useState(false)\n  const handleToggle = (): void => setIsOpen(!isOpen)\n  return (\n    <div className=\"comment\">\n      {props.comments.length ? <p className=\"comment__header\">Comments</p> : ''}\n      {props.comments.length > 0 &&\n        props.comments.map((comment: CommentInterface) => <CommentCard key={comment._id} item={comment} />)}\n      <AddComment closeForm={handleToggle} postId={props.postId} />\n    </div>\n  )\n}\n\nexport default Comment\n\nfunction CommentCard(props: { item: CommentInterface }): JSX.Element {\n  const { comment, commenter, createdAt } = props.item\n  return (\n    <div className=\"comment__card\">\n      <div className=\"comment__body\">\n        <div className=\"comment__title\">\n          <strong>{commenter}</strong>\n          <div className=\"comment__date\">\n            {formatDate(createdAt)}\n            {',  ' + formatTime(createdAt)}\n          </div>\n        </div>\n        <p className=\"comment__text\">{comment}</p>\n      </div>\n    </div>\n  )\n}\n"],"sourceRoot":""}